{
  "hash": "0f0f20507f22fd312c91204c7c67de0f",
  "result": {
    "markdown": "# `dddr`: Three-Dimensional Vector Operations in R {#sec-dddr}\n\n\n\n\n::: {.cell}\n\n:::\n\n\nThe R package `dddr` (pronounced three-dee-arr) is designed for people working with **person-scale, spatial** data.\n\n-   **spatial**: in contrast to most data, which is a single value (e.g., arousal, blinks per second, GDP), spatial data has multiple, tightly-linked values.\n-   **person-scale**: in contrast to packages like `sf` or `rspatial` that focus on *geographic* data (latitude, longitude, altitude), person-scale data uses Euclidean 3D space.\n\nThe roots of this library are in *behavioral tracing* (Yaremych & Persky, 2019), the analysis of behavior recorded finely in both time and space. The primary example is using virtual and augmented reality to collect data on hand motion or head direction.\n\nWhy do we want to do this? In short, this package helps you tidy, visualize, and transform your 3D data more effectively:\n\n-   **tidy** 3D data into individual, meaningful columns\n\n-   **visualize** 3D data according to natural spatial semantics\n\n-   **transform** 3D data using common operations, including many from linear algebra\n\nThese names refer to Hadley Wickham's model of data science, which is a very good overview of the data science process.\n\n![](dsloop.svg)\n\n## Tidy\n\nHere's a common example of 3D data in a table of some sort:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessy_vectors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 300 × 5\n   sensor_x sensor_y sensor_z temperature   time\n      <dbl>    <dbl>    <dbl>       <dbl>  <dbl>\n 1     5     0          0            6.26 0.0333\n 2     4.98  0.00165    0.314        4.66 0.0667\n 3     4.94  0.00658    0.626        6.31 0.1   \n 4     4.88  0.0147     0.934        6.24 0.133 \n 5     4.80  0.0260     1.24         5.37 0.167 \n 6     4.71  0.0403     1.53         3.41 0.2   \n 7     4.59  0.0575     1.82         4.01 0.233 \n 8     4.46  0.0774     2.10         4.64 0.267 \n 9     4.31  0.0999     2.38         4.91 0.3   \n10     4.14  0.125      2.64         7.31 0.333 \n# ℹ 290 more rows\n```\n:::\n:::\n\n\nLet's calculate the speed of the sensor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessy_vectors %>%\n  mutate(\n    delta_t = time - lag(time),\n    velocity_x = (sensor_x - lag(sensor_x)) / delta_t,\n    velocity_y = (sensor_y - lag(sensor_y)) / delta_t,\n    velocity_z = (sensor_z - lag(sensor_x)) / delta_t,\n    speed = sqrt(velocity_x^2 + velocity_y^2 + velocity_z^2)\n  ) %>% select(-starts_with(\"velocity\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 300 × 7\n   sensor_x sensor_y sensor_z temperature   time delta_t speed\n      <dbl>    <dbl>    <dbl>       <dbl>  <dbl>   <dbl> <dbl>\n 1     5     0          0            6.26 0.0333 NA       NA  \n 2     4.98  0.00165    0.314        4.66 0.0667  0.0333 141. \n 3     4.94  0.00658    0.626        6.31 0.1     0.0333 131. \n 4     4.88  0.0147     0.934        6.24 0.133   0.0333 120. \n 5     4.80  0.0260     1.24         5.37 0.167   0.0333 109. \n 6     4.71  0.0403     1.53         3.41 0.2     0.0333  98.1\n 7     4.59  0.0575     1.82         4.01 0.233   0.0333  86.6\n 8     4.46  0.0774     2.10         4.64 0.267   0.0333  74.7\n 9     4.31  0.0999     2.38         4.91 0.3     0.0333  62.6\n10     4.14  0.125      2.64         7.31 0.333   0.0333  50.4\n# ℹ 290 more rows\n```\n:::\n:::\n\n\nWhile there's seven lines of code, there are only two operations, conceptually. This code takes the difference between separate positions to compute a velocity vector, and then computes the magnitude (size) of this velocity vector.\n\nMore importantly, this code is also **buggy!** Do you notice the line `sensor_z - lag(sensor_x)`? This doesn't compute what we want. This error could be a simple copy-and-paste problem that would wouldn't necessarily notice until you're deep into writing other parts of your analysis. The more code you write, the more bugs you will have. Therefore, write less code and write less bugs.\n\n### What is tidy data?\n\nIf the data were tidy, these steps would be less tedious.\n\nThe three criteria for *tidy* data are:\n\n-   Each column represents a variable\n-   Each row represents an observation\n-   Each cell represents a value\n\n[Borrowing directly from Hadley again](https://r4ds.hadley.nz/data-tidy.html):\n\n> Why ensure that your data is tidy? There are two main advantages:\n>\n> There's a general advantage to picking one consistent way of storing data. If you have a consistent data structure, it's easier to learn the tools that work with it because they have an underlying uniformity.\n>\n> There's a specific advantage to placing variables in columns because it allows R's vectorized nature to shine. As you learned in Section 4.3.1 and Section 4.5.2, most built-in R functions work with vectors of values. That makes transforming tidy data feel particularly natural.\n\n![](tidy_data.png)\n\nWe think of position (or velocity) not as three variables, but as one variable represented by a triple of three numbers. Therefore, with tidy data, it should be only one column. This explains why working with XYZ data separately can be so tedious. This can be done with the `vector3` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_vectors <- messy_vectors %>%\n  mutate(\n    sensor = vector3(x = sensor_x, y = sensor_y, z = sensor_z) #<<\n  ) %>%\n  select(sensor, time, temperature)\n\ntidy_vectors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 300 × 3\n                   sensor   time temperature\n                   <vct3>  <dbl>       <dbl>\n 1 (5   , 0      , 0    ) 0.0333        6.26\n 2 (4.98, 0.00165, 0.314) 0.0667        4.66\n 3 (4.94, 0.00658, 0.626) 0.1           6.31\n 4 (4.88, 0.0147 , 0.934) 0.133         6.24\n 5 (4.80, 0.0260 , 1.24 ) 0.167         5.37\n 6 (4.71, 0.0403 , 1.53 ) 0.2           3.41\n 7 (4.59, 0.0575 , 1.82 ) 0.233         4.01\n 8 (4.46, 0.0774 , 2.10 ) 0.267         4.64\n 9 (4.31, 0.0999 , 2.38 ) 0.3           4.91\n10 (4.14, 0.125  , 2.64 ) 0.333         7.31\n# ℹ 290 more rows\n```\n:::\n:::\n\n\nLet's calculate speed again, and see what the code looks like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_vectors %>%\n  mutate(\n    delta_t = time - lag(time),\n    sensor_velocity = (sensor - lag(sensor)) / delta_t,\n    sensor_speed = magnitude(sensor_velocity)\n  ) %>%\n  select(sensor, time, temperature, sensor_speed)\n```\n:::\n\n\nLook! Now we have two lines of code to represent our two conceptual operations. One creates the velocity vector, and the other calculates the speed vector. This is much closer to how we should be thinking of this kind of data.\n\n### How do you tidy data with `dddr`?\n\n`dddr` revolves around two kinds of data: `vector3` and `quat`.\n\n#### `vector3`\n\nThese represent 3D vectors, which can be position, velocity, acceleration, translation, direction, and other types of data.\n\n::: callout-note\nThe name `vector3` highlights the fact there are two kinds of vectors being discussed here: *3-vectors*, a geometric object with magnitude and direction, and *R vectors*, that represent ordered collections of one kind of data. This makes `vector3` an R vector of 3-vectors.\n:::\n\n#### `quat`\n\nShort for quaternion, `quat`s represent orientations, angular velocities, and rigid rotations. While somewhat mathematically complex, `dddr` is written to minimize how much you actually work with, somewhat inspired by the Unity game engine. If you do want a mathematical grounding for what quaternions are, watch a series of videos ([1](https://www.youtube.com/watch?v=d4EgbgTm0Bg), [2](https://www.youtube.com/watch?v=zjMuIxRvygQ)) and interactive explainers ([3](https://eater.net/quaternions)) by Grant Sanderson and Ben Eater.\n\n## Visualize\n\nData visualization is part of any data scientist's toolbelt. Visualization is important for: - checking and cleaning data - understanding rich aspects of data - generating insights from data - reporting findings about data\n\nOne feature of spatial data is that it has a lot of human language associated with it. We can ask about the top view of a scene, and it has a meaning - and if we tell the computer how to translate from XYZ to \"top view\", it can perform the translation for us.\n\n![ViewCube, Khan et al. (2008)](labeled_cube.png)\n\n### Messy data means a messy visualization\n\nLet's plot this data from a **top view**. If `y` is the vertical dimension, then let's use `x` and `z` to plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessy_vectors %>%\n  ggplot(aes(x = sensor_x, y = sensor_z, color = sensor_y)) +\n  geom_point() +\n  coord_equal()\n```\n\n::: {.cell-output-display}\n![](dddr_files/figure-html/messy-viz-1.png){width=384}\n:::\n:::\n\n\nSome of the things this visualization can tell you are that:\n\n-   it spirals inward as you go counterclockwise (looking from the top view)\n-   the back side (high Z) is higher (high Y)\n\nNothing seems wrong yet, right?\n\n### Tidy data means a tidy visualization\n\nAgain, let's plot this data from a top view, but this time, let's do so with dddr.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_vectors %>%\n  ggplot(aes(v = sensor)) +\n  geom_point() +\n  coord_look_at_top()\n```\n:::\n\n\nWait, that's not counterclockwise as you go in... That's *clockwise*.\n\n**In the messy data plot, we accidentally chose the wrong axes - by choosing x for x and y for z, it meant that we had transformed the data like in a mirror, changing the handedness of the coordinate system.**\n\nFollowing a semantic interpretation through all the spatial conventions can be tricky. This is a theme we'll explore in a bit.\n\n### `ggplot2` extensions\n\nAs visible in the code above, `dddr` plugs directly into `ggplot`. Some of the handy pieces are:\n\n-   `geom`s (geometric objects):\n    -   `geom_point3`, `geom_path3`\n    -   `geom_spoke` (direction)\n-   `coord`s (coordinate systems) are specified with `coord_(frame)_(direction)`\n    -   `coord_look_at_top`: Create the view as if you're **looking at** the **top** of the object.\n-   Additional `theme` parameters for the axis rose under `dddr.rose.*`\n\n### Semantics\n\nIf you have worked with 3D data before, think of the coordinate system you know well.\n\n-   What direction is up?\n-   What direction is forward?\n-   What direction is right?\n-   Is the coordinate system left-handed or right-handed?\n-   Which axis does \"roll\" go around?\n-   Does a negative roll make the y-axis move towards the old x-axis, or vice versa?\n-   If you have three rotations (roll, pitch, yaw) in what order are they applied?\n-   If a pitch comes after a roll, does the pitch go around the old axis, or the new axis?\n\nHow many of the questions did you answer confidently and correctly?\n\nThere are 48 potential axis semantics, and 144 potential angle semantics. Some are simple reflections of each other; some are simple rotations; most are neither. This provides a significant challenge when working with \"just\" XYZ data.\n\nVectors in 3D space need to have some *axis semantics*. What meanings - up, down, forward, backward, right, left - are assigned to the positive and negative X-, Y-, and Z-axis? There are 48 different possible conventions, but only a handful are in common use.\n\nOnce the axis semantics are defined, rotations defined by rotation matrices or quaternions are also defined. However, rotations and orientations are often specified using Euler angles or Tait-Bryan angles such as yaw, pitch, and roll. To interpret these consistently, `dddr` uses *angle semantics*, specifying what yaw, pitch, and roll mean. What axis is each rotation performed around? What order do these rotations go in? Are the rotations applied to the axes of future rotations? Given three angles, there are 144 possible rotations that could be referred to.\n\n`dddr` provides some handy defaults in commonly used coordinate systems, such as this code for Unity's coordinate system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset_dddr_semantics(axes = semantics_axes_unity, angles = semantics_angles_unity)\n```\n:::\n\n\n## Transform\n\nOftentimes the data isn't showing what you want, and you need to create, modify, amd summarize columns to get to a new result.\n\n### Transforming `vector3`\n\nThe `vector3` class supports a wide range of functions. In these examples, `u`, `v`, `w` are `vector3`s, `q` and `p` are `quat`s, and `x` is a numeric.\n\n-   Creation: `v <- vector3(x = xs, y = ys, z = zs)`\n-   Field access: `v$x`, `v$y`, `v$z`\n-   Vector properties: `magnitude(v)`, `direction(v)`\n-   Arithmetic: `v + w`, `v - w`, `2 * v`, `v / x`\n-   R vector math: `mean(v)`, `sum(v)`, `cumsum(v)`\n-   3-vector math: `dot(v, w)`, `cross(v, w)`\n-   Spatial operations:\n    -   `project(v, onto=w)`, `reject(v, from=w)`\n    -   `angle_between(v, w, around=u)`, `distance_between(v, w)`,\n\n### Transforming with `quat` and `rotate`\n\nWorking with quaternions can be a little difficult, but when necessary, there are operations that support it:\n\n-   Creation: `q <- quat(w = ws, x = xs, y = ys, z = zs)`\n-   Multiplication (composition): `q2 <- p * q`\n-   Conjugation (inversion): `Conj(q)`\n-   Quaternion equality: `quat(1, 0, 0, 0) == quat(-1, 0, 0, 0)`\n\nWorking in Tait-Bryan angles is more straightforward.\n\n-   Create a quaternion: `q <- tait_bryan(yaw, pitch, roll)`\n-   Pull out the rotation values: `yaw(q)`, `pitch(q)`, `roll(q)`\n\nQuaternions are used to rotate.\n\n-   Rotate using a quaternion: `rotate(v, q)`\n-   Rotate around a point: `rotate(v, q, origin = w)`\n-   Rotate through an angle around an axis: `rotate(v, angle = x, axis = w)`\n-   Rotate along the shortest path implied by two vectors: `rotate(v, from = w, to = u)`\n\n## Using `dddr`\n\nInstallation is done through Github and devtools, as dddr is not ready for CRAN just yet.\n\n``` r\n# if you have not installed \"devtools\"\ninstall.packages(\"devtools\")\n\n# For the most recent released version of dddr\ndevtools::install_github(\"markromanmiller/dddr@*release\")\n\n# For the development version of dddr\ndevtools::install_github(\"markromanmiller/dddr\")\n```\n\nQuestions about dddr and bug reports are always appreciated! Email me at mmiller30 -at- iit -dot- edu, or file a bug report on the [Github repository](https://github.com/markromanmiller/dddr).\n",
    "supporting": [
      "dddr_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}