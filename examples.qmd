# Examples of Social Analysis {#sec-examples}

## libraries

synsyn (https://github.com/markromanmiller/synsyn) dddr

## total motion over time

## distance between people

Distance between people can be tricky because usually distance can be measured over time. The question becomes how collapse a time series of values into one value.

A very simple option is to simply take the average. In some highly controlled situations, this is acceptable. The assumption that one makes when averaging is that all the distances and times are roughly equally important. This makes sense when two people are facing each other and interacting for the vast majority of time, and there are no outliers in terms of distance.

In some work (for example, the study "Proxemics and Gaze in Virtual Environments" that I led at IEEE VR 2023), I instead went with a not-quite-minimum. This, to me, better captured the fact that interpersonal distance is more about how close you are without feeling uncomfortable. The reason this was used instead of minimum was because occastionally people might teleport too close to each other and need to adjust their distance.

Code for both is below.

``` r
# Take the file, read it, and get virtual position of root, and physical position of head, and find visible position.
preprocess <- function(file_path, session_id, participant_id, ...) {
  # exactly one file per person
  read_tsv(file_path, col_types = list(Timestamp = col_time("%H:%M:%OS")), progress = F) %>%
    bundle(
      Root = "Root_Pos{v}",
      RootRot = "Root_Rot{ed}",
      RawHead = "Head_Pos{v}"
    ) %>%
    select(Timestamp, Root, RootRot, RawHead) %>%
    mutate(session_id = session_id) %>%
    mutate(
      # convert to visible motion
      VisibleRawHead = Root + rotate(RawHead, RootRot)
    )
}

# Take average distance between participants
average_distance_between <- function(px_data, py_data) {
  joined <- inner_join(px_data, py_data, by = c("Timestamp"))

  if (nrow(joined) == 0) {
    return (NULL)
  }

  joined %>%
    mutate(
      dist = distance_between(VisibleRawHead.y, VisibleRawHead.x) %>%
    ) %>%
    summarize(
      dist = mean(dist)
    )
}

# Take the minimum distance between participants, ignoring 5 seconds worth of motion data
average_distance_between <- function(px_data, py_data) {
  joined <- inner_join(px_data, py_data, by = c("Timestamp"))

  if (nrow(joined) == 0) {
    return (NULL)
  }

  joined %>%
    mutate(
      dist = distance_between(VisibleRawHead.y - VisibleRawHead.x) %>%
    ) %>%
    summarize(
      # Notice that the only difference is the summarize function
      dist = sort(dist)[150]
    )
}

# Now that the functions are defined, run them on the BIDS data
results <- bd %>%
  bids_motion() %>%
  summarize_motion_pairs(
    relate = select_which_motion_relation_function_you_want,
    preprocess = preprocess,
    ordered = T,
    #head = 5,
    progress = T
  ) %>%
  unnest(result)
```

## Heatmap

## Gaze distribution

## Mutual gaze

``` r
# Load libraries
library(tidyverse)
devtools::load_all("~/thesis/multiverse/")
devtools::load_all("~/work/dddr")
devtools::load_all("~/thesis/rbids/")
devtools::load_all("~/thesis/synsyn/")

# load BIDS dataset
bd <- bids("/media/mark/mrm-thesis-files/virtual-summer/bids-standard/vhil-2021-summer/")

# let dddr know that we're working with Unity's axis and angles conventions.
set_dddr_semantics(axes = semantics_axes_unity, angles = semantics_angles_unity)

# Take the file, read it, and get virtual position of root, and physical position of head, and find visible position.
preprocess <- function(file_path, session_id, participant_id, ...) {
  # exactly one file per person
  read_tsv(file_path, col_types = list(Timestamp = col_time("%H:%M:%OS")), progress = F) %>%
    bundle(
      Root = "Root_Pos{v}",
      RootRot = "Root_Rot{ed}",
      RawHead = "Head_Pos{v}",
      RawHeadRot = "Head_Rot{ed}"
    ) %>%
    select(Timestamp, Root, RootRot, RawHead, RawHeadRot) %>%
    mutate(session_id = session_id) %>%
    mutate(
      # convert to visible motion
      VisibleRawHead = Root + rotate(RawHead, RootRot),
      VisibleRawHeadRot = rotate(RawHeadRot, RootRot, as = "orientation")
    )
}

# take two participant's placement, and calculate whether they're looking at each other or if X is looking at Y.
relate_intrinsic_yp <- function(px_data, py_data) {
  joined <- inner_join(px_data, py_data, by = c("Timestamp"))

  if (nrow(joined) == 0) {
    return (NULL)
  }

  joined %>%
    #slice_sample(prop = 0.01) %>%
    mutate(
      y_from_x = angle_between(VisibleRawHead.y - VisibleRawHead.x, vector3(0, 0, 1) %>% rotate(VisibleRawHeadRot.x)) < 15/180 * pi,
      x_from_y = angle_between(VisibleRawHead.x - VisibleRawHead.y, vector3(0, 0, 1) %>% rotate(VisibleRawHeadRot.y)) < 15/180 * pi,
      mutual = y_from_x & x_from_y
    ) %>%
    select(
      Timestamp, y_from_x, mutual
    )
}

# This function takes several pairs' worth of data and collapses them to one timeframe for each person.
group_summary_align_and_boolean <- function(list_df) {
  list_df %>%
    bind_rows() %>%
    unnest(result) %>%
    group_by(participant_id_x, Timestamp) %>%
    summarize(
      y_from_x = any(y_from_x),
      mutual = any(mutual),
      .groups = "drop_last"
    ) %>%
    summarize(
      social_attention = mean(y_from_x, na.rm = T),
      mutual_gaze = mean(mutual, na.rm = T),
      total_frames = n(),
      na_social_attention_frames = sum(is.na(y_from_x)),
      na_mutual_gaze_frames = sum(is.na(mutual)),
      .groups = "drop"
    ) %>%
    group_nest(.key = "result")
}

# Now that the functions are defined, run them on the BIDS data
results <- bd %>%
  bids_motion() %>%
  #filter(session_id %>% endsWith("section1")) %>%
  #filter(session_id == "week7section8") %>%
  summarize_motion_pairs(
    relate = relate_intrinsic_yp,
    preprocess = preprocess,
    group_summary = group_summary_align_and_boolean,
    ordered = T,
    #head = 5,
    progress = T
  ) %>%
  unnest(result)

# Output the file with a timestamp to make it unique.
output_file <- paste0("results_", strftime(Sys.time(), format = "%y_%m_%d_%H%M%S"), ".csv")
cat("Output file at", output_file)

results %>% write_csv(output_file)
```
